@inject EventoService eventoService
@inject ClienteService clienteService
@page "/"

<PageTitle>Home</PageTitle>

<div class="min-h-screen">
    <h1 class="text-4xl text-white">Eventos</h1>

    <!-- Filtros de búsqueda -->
    <div class="mb-8 flex flex-wrap gap-6">
        <div class="w-full sm:w-1/2 lg:w-1/3">
            <label for="clienteSelect" class="mb-2 block text-sm font-medium text-gray-700">Cliente</label>
            <select id="clienteSelect"
                    class="block w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    @onchange="OnClienteChanged">
                <option value="">Todos los clientes</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.Id">@cliente.Nombre @cliente.ApellidoPaterno</option>
                }
            </select>
        </div>
        <div class="w-full sm:w-1/2 lg:w-1/3">
            <label for="tipoEventoSelect" class="mb-2 block text-sm font-medium text-gray-700">Tipo de Evento</label>
            <select id="tipoEventoSelect"
                    class="block w-full rounded-md border border-gray-300 px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    @onchange="OnTipoEventoChanged">
                <option value="">Todos los tipos</option>
                @foreach (var tipo in tiposEventos)
                {
                    <option value="@tipo.Id">@tipo.NombreTipo</option>
                }
            </select>
        </div>
    </div>


    <!-- Grid de eventos -->
    <div class="grid-cols-1 mt-5 grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        @if (eventosFiltrados == null || !eventosFiltrados.Any())
        {
            <div class="col-span-3 flex h-64 items-center justify-center">
                <p class="text-xl font-medium text-gray-400">
                    <span class="mr-3 inline-block animate-spin">⟳</span>
                    Cargando eventos...
                </p>
            </div>
        }
        else if (eventos.Count == 0)
        {
            <div class="flex items-center justify-center">
                <p class="text-lg text-gray-600">No hay eventos disponibles.</p>
            </div>
        }
        else
        {
            @foreach (var evento in eventosFiltrados)
            {
                <div class="group mx-auto w-full max-w-sm transform transition-all duration-300 hover:scale-105">
                    <div class="relative overflow-hidden rounded-xl bg-gray-800 bg-gradient-to-br shadow-xl backdrop-blur-sm transition-all duration-300 hover:shadow-2xl hover:shadow-blue-500/10">
                        <a href="#" @onclick="() => MostrarModal(evento)" class="block">
                            <div class="from-blue-900/20 to-gray-800/20 relative h-56 overflow-hidden bg-gradient-to-br">
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <div class="group-hover:scale-110 relative h-32 w-32 transform transition-transform duration-300">
                                        <img src="data:image/jpeg;base64,@evento.ImagenEventoBase64"
                                             alt="Imagen del evento"
                                             class="ring-4 h-full w-full rounded-full object-cover ring-white">
                                        <div class="from-purple-500/20 to-blue-500/20 group-hover:opacity-75 absolute inset-0 rounded-full bg-gradient-to-br transition-opacity duration-300"></div>
                                    </div>
                                </div>
                            </div>
                        </a>

                        <div class="p-6">
                            <h3 class="mb-4 text-xl font-bold text-gray-100">
                                @evento.Nombre
                            </h3>

                            <button @onclick="() => Descargar(evento.Id, evento.Nombre)"
                                    class="w-full bg-white hover:text-white rounded-lg px-6 py-3 text-sm font-semibold text-black shadow-lg transition-all duration-300">
                                Descargar Archivo
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Modal -->
    @if (eventoSeleccionado != null && modalVisible)
    {
        <div class="fixed inset-0 z-50 flex items-center justify-center p-4 backdrop-blur-sm transition-opacity duration-300 ease-in-out">
            <div class="bg-black/60 absolute inset-0" @onclick="CerrarModal"></div>
            <div class="@modalClass shadow-purple-500/10 relative w-full max-w-lg transform rounded-xl bg-gradient-to-br from-gray-800 to-gray-900 shadow-2xl transition-all duration-300 ease-in-out">
                <!-- Header -->
                <div class="border-gray-700/50 flex items-center justify-between border-b p-6">
                    <h2 class="text-xl font-bold text-gray-100">@eventoSeleccionado.Nombre</h2>
                    <button @onclick="CerrarModal" class="rounded-lg p-2 text-gray-400 transition-colors hover:bg-gray-700 hover:text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <!-- Contenido -->
                <div class="space-y-4 p-6">
                    <div class="bg-gray-800/50 rounded-lg p-4">
                        <p class="text-gray-300"><span class="font-semibold text-purple-400">Cliente:</span> @eventoSeleccionado.NombreCliente</p>
                    </div>
                    <div class="bg-gray-800/50 rounded-lg p-4">
                        <p class="text-gray-300"><span class="font-semibold text-purple-400">Evento:</span> @eventoSeleccionado.NombreTipoEvento</p>
                    </div>
                    <div class="bg-gray-800/50 rounded-lg p-4">
                        <p class="text-gray-300"><span class="font-semibold text-purple-400">Descripción:</span> @eventoSeleccionado.Descripcion</p>
                    </div>
                    <div class="bg-gray-800/50 rounded-lg p-4">
                        <p class="text-gray-300"><span class="font-semibold text-purple-400">Fecha:</span> @eventoSeleccionado.Fecha?.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="bg-gray-800/50 rounded-lg p-4">
                        <p class="text-gray-300"><span class="font-semibold text-purple-400">Ubicación:</span> @eventoSeleccionado.Ubicacion</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script>
    window.descargarArchivo = function (base64Data, fileName) {
        var link = document.createElement("a");
        link.href = "data:application/pdf;base64," + base64Data;
        link.download = fileName;
        link.click();
    };
</script>

@code {
    private List<EventoCLS> eventos = new List<EventoCLS>();
    private List<EventoCLS> eventosFiltrados = new List<EventoCLS>();
    private List<ClienteCLS> clientes = new List<ClienteCLS>();
    private List<TipoEventoCLS> tiposEventos = new List<TipoEventoCLS>();
    private EventoCLS? eventoSeleccionado;
    private bool modalVisible = false;
    private string modalClass = "scale-95 opacity-0";

    private string clienteSeleccionado = "";
    private string tipoEventoSeleccionado = "";

    protected override async Task OnInitializedAsync()
    {
        eventos = await eventoService.GetEventos();
        clientes = await clienteService.GetClientes();
        tiposEventos = await eventoService.GetTipoEventos();
        eventosFiltrados = eventos;
    }

    private void OnClienteChanged(ChangeEventArgs e)
    {
        clienteSeleccionado = e.Value?.ToString() ?? "";
        FiltrarEventos();
    }

    private void OnTipoEventoChanged(ChangeEventArgs e)
    {
        tipoEventoSeleccionado = e.Value?.ToString() ?? "";
        FiltrarEventos();
    }

    private void FiltrarEventos()
    {
        eventosFiltrados = eventos.Where(e =>
            (string.IsNullOrEmpty(clienteSeleccionado) || e.ClienteId.ToString() == clienteSeleccionado) &&
            (string.IsNullOrEmpty(tipoEventoSeleccionado) || e.TipoEventoId.ToString() == tipoEventoSeleccionado)
        ).ToList();
    }

    private void MostrarModal(EventoCLS evento)
    {
        eventoSeleccionado = evento;
        modalVisible = true;
        Task.Delay(10).ContinueWith(_ =>
        {
            modalClass = "scale-100 opacity-100";
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task CerrarModal()
    {
        modalClass = "scale-95 opacity-0";
        await Task.Delay(200);
        modalVisible = false;
        eventoSeleccionado = null;
    }

    private async void Descargar(int idEvento, string nombreEvento)
    {
        await eventoService.Descargar(idEvento, nombreEvento);
    }
}
