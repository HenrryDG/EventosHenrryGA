@inject EventoService eventoService

<div class="flex items-center justify-between">
    <div class="flex items-center">
        <input type="text" class="rounded-lg border border-gray-300 p-2" placeholder="Buscar evento..." @bind="eventoBuscado" />
        <button class="ml-2 rounded-lg bg-gray-700 px-4 py-2 text-white transition-all duration-200 hover:bg-gray-800" @onclick="Buscar">Buscar</button>
        <button class="ml-2 rounded-lg bg-gray-700 px-4 py-2 text-white transition-all duration-200 hover:bg-gray-800" @onclick="Limpiar">Limpiar</button>
    </div>
    <button class="rounded-lg bg-gray-700 px-4 py-2 text-white transition-all duration-200 hover:bg-gray-800" @onclick="AbrirModalNuevoEvento" >Nuevo Evento</button>
</div>


@if (eventos == null)
{
        <p class="text-center text-xl font-medium text-gray-400">
            <span class="mr-3 inline-block animate-spin">⟳</span>
            Cargando eventos...
        </p>
}
else if (eventos.Count == 0)
{
    <div class="flex items-center justify-center">
        <p class="text-lg text-gray-600">No hay eventos disponibles.</p>
    </div>
}
else
{
    <div class="relative mt-11 overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-center text-sm text-gray-500 rtl:text-right dark:text-gray-400">
            <thead class="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3">ID</th>
                    <th scope="col" class="px-6 py-3">Imagen</th>
                    <th scope="col" class="px-6 py-3">Evento</th>
                    <th scope="col" class="px-6 py-3">Tipo de Evento</th>
                    <th scope="col" class="px-6 py-3">Fecha</th>
                    <th scope="col" class="px-6 py-3">Ubicacion</th>
                    <th scope="col" class="px-6 py-3">Cliente</th>
                    <th scope="col" class="px-6 py-3">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evento in eventosFiltrados)
                {
                    <tr class="border-b bg-white hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-600">
                        <th scope="row" class="whitespace-nowrap px-6 py-4 font-medium text-gray-900">
                            @evento.Id
                        </th>
                        <td class="flex justify-center px-6 py-4">
                            @if (!string.IsNullOrEmpty(evento.ImagenEventoBase64))
                            {
                                <img src="data:image/jpeg;base64,@evento.ImagenEventoBase64" alt="Imagen" class="h-20 w-20 rounded-full object-cover">
                            }
                            else
                            {
                                <p>No hay imagen disponible</p>
                            }
                        </td>
                        <td class="px-6 py-4">
                            @evento.Nombre
                        </td>
                        <td class="px-6 py-4">
                            @evento.NombreTipoEvento
                        </td>
                        <td class="px-6 py-4">
                            @evento.Fecha?.ToString("yyyy-MM-dd")
                        </td>
                        <td class="px-6 py-4">
                            @evento.Ubicacion
                        </td>
                        <td class="px-6 py-4">
                            @evento.NombreCliente

                        </td>
                        <td class="px-6 py-4">
                            <button @onclick="() => DescargarArchivo(evento.Id, evento.Nombre)"
                                    class="bg-gray-800 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded shadow-md transition-all duration-300 ease-in-out">
                                Descargar
                            </button>

                            <button @onclick="() => AbrirModalEditarEvento(evento.Id)" class="rounded bg-blue-600 px-4 py-2 font-bold text-white shadow-md transition-all duration-300 ease-in-out hover:bg-blue-500">
                                Editar
                            </button>

                            <button @onclick="() => BorrarEvento(evento.Id) "  class="rounded bg-red-600 px-4 py-2 font-bold text-white shadow-md transition-all duration-300 ease-in-out hover:bg-red-500">
                                Eliminar
                            </button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (mostrarModal)
{
    <EventosModal IdEvento="eventoSeleccionado" OnClose="CerrarModal"/>

}

<script>
    console.log("el script ha cargado")
    window.descargarArchivo = function (base64Data, fileName) {
        var link = document.createElement("a");
        link.href = "data:application/pdf;base64," + base64Data;
        link.download = fileName;
        link.click();
    };
</script>


@code {
    private List<EventoCLS> eventos = null!;
    private List<EventoCLS> eventosFiltrados = null!;
    private string eventoBuscado = string.Empty;

    private bool mostrarModal = false;
    private int eventoSeleccionado = 0;


    protected override async Task OnInitializedAsync()
    {
        eventos = await eventoService.GetEventos();
        eventosFiltrados = eventos;
    }

    private void Buscar()
    {
        if (string.IsNullOrEmpty(eventoBuscado))
        {
            eventosFiltrados = eventos; // Si no hay texto de búsqueda, mostrar todos los eventos
        }
        else
        {
            var palabras = eventoBuscado.Split(' ', StringSplitOptions.RemoveEmptyEntries); // Divide la búsqueda en palabras

            eventosFiltrados = eventos
                .Where(e => palabras.All(palabra =>
                    e.Nombre!.Contains(palabra, StringComparison.OrdinalIgnoreCase) || // Buscar en el nombre
                    e.NombreTipoEvento!.Contains(palabra, StringComparison.OrdinalIgnoreCase)))// Buscar en el tipo de evento                ))
                .ToList();
        }

    }


    private void Limpiar()
    {
        eventosFiltrados = eventos;
        eventoBuscado = string.Empty;

    }

    private void AbrirModalNuevoEvento()
    {
        eventoSeleccionado = 0;
        mostrarModal = true;

    }

    private void AbrirModalEditarEvento(int idCliente)
    {
        eventoSeleccionado = idCliente;
        mostrarModal = true;

    }

    private async Task CerrarModal()
    {
        mostrarModal = false;
        eventos = await eventoService.GetEventos();
        eventosFiltrados = eventos;
    }

    private async Task BorrarEvento(int idEvento)
    {
        await eventoService.DeleteEvento(idEvento);
        eventos = await eventoService.GetEventos();
        eventosFiltrados = eventos;
    }

    private async Task DescargarArchivo(int idEvento, string nombreEvento)
    {
        await eventoService.Descargar(idEvento, nombreEvento);
    }
}
@code {

}
