@inject ClienteService clienteService
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div class="relative max-h-full w-full max-w-md p-4">
        <!-- Modal content -->
        <div class="relative rounded-lg bg-gray-700 shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between rounded-t border-b p-4 dark:border-gray-600 md:p-5">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    @Titulo
                </h3>
                <button @onclick="CerrarModal" type="button" class="ms-auto inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="crud-modal">
                    <svg class="h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Cerrar</span>
                </button>
            </div>
            <!-- Modal body -->
            
            <EditForm Model="@cliente" OnValidSubmit="@GuardarCliente">
                <DataAnnotationsValidator />

                <div class="p-4">
                    <div class="grid-cols-2 mb-4 grid gap-4">
                        <div class="col-span-2">
                            <label for="nombre" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Nombre</label>
                            <input type="text" @bind="cliente.Nombre" id="nombre"
                                   class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                                   placeholder="Nombre">
                            <span class="text-sm text-red-500">
                                <ValidationMessage For="@(() => cliente.Nombre)" />
                            </span>
                        </div>

                        <div class="col-span-2">
                            <label for="apellidoPaterno" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Apellido Paterno</label>
                            <input type="text" @bind="cliente.ApellidoPaterno" id="ap_paterno"
                                   class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                                   placeholder="Apellido Paterno">
                            <span class="text-sm text-red-500">
                                <ValidationMessage For="@(() => cliente.ApellidoPaterno)" />
                            </span>
                        </div>

                        <div class="col-span-2">
                            <label for="apellidoMaterno" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Apellido Materno</label>
                            <input type="text" @bind="cliente.ApellidoMaterno" id="ap_materno"
                                   class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                                   placeholder="Apellido Materno">
                            <span class="text-sm text-red-500">
                                <ValidationMessage For="@(() => cliente.ApellidoMaterno)" />
                            </span>
                        </div>
                    </div>

                    <button type="submit" class="inline-flex items-center rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                        <svg class="-ms-1 me-1 h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
                        </svg>
                        Guardar
                    </button>
                </div>
            </EditForm>


        </div>
    </div>
</div>


@code {
    [Parameter]
    public int IdCliente { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private ClienteCLS cliente = new ClienteCLS();

    private string Titulo { get; set; } = string.Empty;
    private string Mensaje { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        Titulo = IdCliente == 0 ? "Nuevo Cliente" : "Editar Cliente";

        if (IdCliente != 0)
        {
            cliente = await clienteService.GetCliente(IdCliente); // Recupera el cliente por ID
        }
        else
        {
            cliente = new ClienteCLS(); // Limpia los datos si es un nuevo cliente
            Console.WriteLine("Nuevo Cliente creado");
        }
    }

    private async Task GuardarCliente()
    {
        await clienteService.SaveCliente(cliente);
        await CerrarModal();
    }

    private async Task CerrarModal()
    {
        await OnClose.InvokeAsync(); // Notifica al componente padre que se cerró el modal
    }
}
